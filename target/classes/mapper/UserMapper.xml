<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.configcenter.mapper.UserMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.example.configcenter.entity.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="department" property="department" jdbcType="VARCHAR"/>
        <result column="role" property="role" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="last_login_time" property="lastLoginTime" jdbcType="BIGINT"/>
        <result column="last_login_ip" property="lastLoginIp" jdbcType="VARCHAR"/>
        <result column="avatar" property="avatar" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="create_by" property="createBy" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="update_by" property="updateBy" jdbcType="VARCHAR"/>
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, username, password, real_name, email, phone, department, role, status,
        last_login_time, last_login_ip, avatar, create_time, create_by, update_time, update_by
    </sql>

    <!-- 根据ID查询用户 -->
    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE id = #{id}
    </select>

    <!-- 根据用户名查询用户 -->
    <select id="findByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE username = #{username}
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="findByEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE email = #{email}
    </select>

    <!-- 查询所有用户 -->
    <select id="findAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        ORDER BY create_time DESC
    </select>

    <!-- 分页查询用户 -->
    <select id="findByPage" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        <where>
            <if test="keyword != null and keyword != ''">
                AND (username LIKE CONCAT('%', #{keyword}, '%')
                OR real_name LIKE CONCAT('%', #{keyword}, '%')
                OR email LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 统计用户数量 -->
    <select id="count" parameterType="java.lang.String" resultType="int">
        SELECT COUNT(*)
        FROM sys_user
        <where>
            <if test="keyword != null and keyword != ''">
                AND (username LIKE CONCAT('%', #{keyword}, '%')
                OR real_name LIKE CONCAT('%', #{keyword}, '%')
                OR email LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
    </select>

    <!-- 插入用户 -->
    <insert id="insert" parameterType="com.example.configcenter.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user (
            username, password, real_name, email, phone, department, role, status,
            last_login_time, last_login_ip, avatar, create_time, create_by, update_time, update_by
        ) VALUES (
            #{username}, #{password}, #{realName}, #{email}, #{phone}, #{department}, #{role}, #{status},
            #{lastLoginTime}, #{lastLoginIp}, #{avatar}, #{createTime}, #{createBy}, #{updateTime}, #{updateBy}
        )
    </insert>

    <!-- 更新用户 -->
    <update id="update" parameterType="com.example.configcenter.entity.User">
        UPDATE sys_user
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="password != null">password = #{password},</if>
            <if test="realName != null">real_name = #{realName},</if>
            <if test="email != null">email = #{email},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="department != null">department = #{department},</if>
            <if test="role != null">role = #{role},</if>
            <if test="status != null">status = #{status},</if>
            <if test="lastLoginTime != null">last_login_time = #{lastLoginTime},</if>
            <if test="lastLoginIp != null">last_login_ip = #{lastLoginIp},</if>
            <if test="avatar != null">avatar = #{avatar},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
        </set>
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除用户 -->
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM sys_user WHERE id = #{id}
    </delete>

    <!-- 更新最后登录信息 -->
    <update id="updateLastLogin">
        UPDATE sys_user
        SET last_login_time = #{lastLoginTime}, last_login_ip = #{lastLoginIp}
        WHERE id = #{id}
    </update>

    <!-- 更新密码 -->
    <update id="updatePassword">
        UPDATE sys_user
        SET password = #{password}, update_time = NOW()
        WHERE id = #{id}
    </update>

    <!-- 检查用户名是否存在 -->
    <select id="existsByUsername" parameterType="java.lang.String" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM sys_user
        WHERE username = #{username}
    </select>

    <!-- 检查邮箱是否存在 -->
    <select id="existsByEmail" parameterType="java.lang.String" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM sys_user
        WHERE email = #{email}
    </select>

    <!-- 根据角色统计用户数量 -->
    <select id="countByRole" parameterType="java.lang.String" resultType="int">
        SELECT COUNT(*)
        FROM sys_user
        WHERE role = #{role} AND del_flag = 0
    </select>

    <!-- 根据状态统计用户数量 -->
    <select id="countByStatus" parameterType="java.lang.String" resultType="int">
        SELECT COUNT(*)
        FROM sys_user
        WHERE status = #{status} AND del_flag = 0
    </select>

    <!-- 获取用户统计信息 -->
    <select id="getUserStatistics" resultType="map">
        SELECT 
            COUNT(*) as totalUsers,
            SUM(CASE WHEN status = 'ACTIVE' THEN 1 ELSE 0 END) as activeUsers,
            SUM(CASE WHEN status = 'INACTIVE' THEN 1 ELSE 0 END) as inactiveUsers,
            SUM(CASE WHEN status = 'LOCKED' THEN 1 ELSE 0 END) as lockedUsers,
            SUM(CASE WHEN role = 'ADMIN' THEN 1 ELSE 0 END) as adminUsers,
            SUM(CASE WHEN role = 'DEVELOPER' THEN 1 ELSE 0 END) as developerUsers,
            SUM(CASE WHEN role = 'VIEWER' THEN 1 ELSE 0 END) as viewerUsers
        FROM sys_user
        WHERE del_flag = 0
    </select>

    <!-- 检查是否为最后一个管理员 -->
    <select id="isLastAdmin" resultType="boolean">
        SELECT COUNT(*) = 1
        FROM sys_user
        WHERE role = 'ADMIN' 
        AND status = 'ACTIVE' 
        AND del_flag = 0
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <!-- 根据部门查询用户列表 -->
    <select id="findByDepartment" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE department = #{department} AND del_flag = 0
        ORDER BY create_time DESC
    </select>

    <!-- 批量更新用户状态 -->
    <update id="batchUpdateStatus">
        UPDATE sys_user
        SET status = #{status}, update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

</mapper> 